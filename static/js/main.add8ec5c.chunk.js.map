{"version":3,"sources":["types/types.js","store/store.js","reducers/markerReducer.js","helpers/constants.js","components/Search.js","customHooks/useAutocomplete.js","actions/markerActions.js","components/Map.js","customHooks/useMap.js","App.js","index.js"],"names":["types","reducers","combineReducers","markers","state","action","type","payload","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","center","lat","lng","options","disableDefaultUI","zoomControl","mapContainerStyle","width","height","margin","Search","mapRef","dispatch","useDispatch","usePlacesAutocomplete","requestOptions","location","radius","ready","value","suggestions","status","data","setValue","clearSuggestions","panTo","useCallback","current","setZoom","onSelect","address","a","getGeocode","result","getLatLng","geometry","marker","time","Date","console","log","useAutocomplete","className","onChange","target","disabled","placeholder","map","option","class","onClick","description","place_id","Map","ref","useRef","useSelector","useLoadScript","googleMapsApiKey","process","libraries","isLoaded","loadError","useMap","onMapLoad","zoom","onLoad","position","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.add8ec5c.chunk.js","sourcesContent":["export const types = {\n    addMarker:'[marker] Add marker'\n}","import {createStore, combineReducers}from 'redux';\nimport { markerReducer } from '../reducers/markerReducer';\n\nconst reducers = combineReducers({\n    markers: markerReducer\n});\n\nexport const store = createStore(\n    reducers,\n    window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\n);","import { types } from \"../types/types\";\n\nexport const markerReducer = (state = [], action) => {\n\n    switch (action.type) {\n        case types.addMarker:\n            return [\n                ...state,\n                action.payload\n            ]\n    \n        default:\n            return state;\n    }\n    \n}\n","export const GOOGLE_MAPS_API_KEY = \"AIzaSyBDg2OwZkIQUgezLK02CWD7QApPE6h7lkY\";\n\nexport const center = {\n  lat: 41.36858001543224,\n  lng: 2.1100374509270323,\n};\n\nexport const options = {\n  disableDefaultUI: true,\n  zoomControl: true,\n};\n\nexport const mapContainerStyle = {\n    width: '100vw',\n    height:'100vh', \n    margin:'0px auto'\n  }\n","import React from \"react\";\nimport { Combobox } from \"@reach/combobox\";\nimport { useAutocomplete } from \"../customHooks/useAutocomplete\";\nexport const Search = ({ mapRef }) => {\n  const [ready, value, status, data, setValue, onSelect] = useAutocomplete(\n    mapRef\n  );\n\n  const handleInputChange = ({ target }) => {\n    setValue(target.value);\n  };\n\n\n\n\n  return (\n    <div className=\"search\">\n      <Combobox onSelect={onSelect}>\n        <input\n          value={value}\n          onChange={handleInputChange}\n          disabled={!ready}\n          placeholder=\"Search places...\"\n          type=\"text\"\n        />\n\n        {status === \"OK\" ? (\n          <ol>\n            {data.map((option) => (\n              <span key={option.place_id}>\n              <hr class=\"solid\"/>\n              <li\n                onClick={() => onSelect(option.description)}\n                key={option.place_id}\n              >\n                {option.description}\n              </li>\n              </span>\n            ))}\n          </ol>\n        ) : null}\n      </Combobox>\n    </div>\n  );\n};\n","import { useCallback } from \"react\";\nimport usePlacesAutocomplete  ,{\n    getGeocode,\n    getLatLng,\n  } from \"use-places-autocomplete\";\nimport { center } from \"../helpers/constants\";\nimport { useDispatch } from \"react-redux\";\nimport { addMarker } from \"../actions/markerActions\";\n\nexport const useAutocomplete = (mapRef) => {\n\nconst dispatch = useDispatch();\n  const {\n    ready,\n    value,\n    suggestions: { status, data },\n    setValue,\n    clearSuggestions,\n  } = usePlacesAutocomplete({\n    requestOptions: {\n      location: {\n        lat: () => center.lat,\n        lng: () => center.lng,\n      },\n      radius: 200 * 1000,\n    },\n  });\n\n  const panTo = useCallback((lat, lng) => {\n      mapRef.current.panTo({lat,lng});\n      mapRef.current.setZoom(14);\n\n  }, []);\n\n\n  const onSelect = async (address) => {\n      setValue(address, false);\n      clearSuggestions();\n   try {\n       const result = await getGeocode({address});\n\n       const {lat, lng} = await getLatLng(result[0]);\n       const {location} = result[0].geometry;\n\n       dispatch(\n        addMarker({\n          lat: location.lat(),\n          lng: location.lng(),\n          time: new Date(),\n        })\n      );\n\n       panTo(lat, lng);\n \n       \n   } catch (error) {\n       console.log(error);\n   }\n    \n  };\n\n  return [ready, value, status, data, setValue, onSelect];\n};\n","import { types } from \"../types/types\";\n\nexport const addMarker = (marker) => ({\n  type: types.addMarker,\n  payload: marker,\n});\n","import React, { useRef } from \"react\";\nimport { GoogleMap, Marker } from \"@react-google-maps/api\";\nimport \"@reach/combobox/styles.css\";\nimport { Search } from \"./Search\";\nimport { useMap } from \"../customHooks/useMap\";\nimport { center, options, mapContainerStyle } from \"../helpers/constants\";\nimport { useSelector } from \"react-redux\";\n\nexport const Map = () => {\n  const ref = useRef();\n\n  const markers = useSelector((state) => state.markers);\n\n  const [onMapLoad, isLoaded, loadError] = useMap(ref);\n\n  if (loadError) return \"Error loading maps\";\n\n\n  return (\n    <div className=\"container\">\n      {  !loadError && isLoaded ? (\n        <>\n          <Search mapRef={ref} />\n          <GoogleMap\n            mapContainerStyle={mapContainerStyle}\n            zoom={8}\n            center={center}\n            options={options}\n            onLoad={onMapLoad}\n          >\n            {markers.map((marker) => (\n              <Marker\n                key={marker.time + marker.lat}\n                position={{\n                  lat: marker.lat,\n                  lng: marker.lng,\n                }}\n              />\n            ))}\n          </GoogleMap>\n        </>\n      ) : \"Error loading maps\"}\n    </div>\n  );\n};\n","import { useLoadScript } from \"@react-google-maps/api\";\nimport { useCallback} from \"react\";\nimport { GOOGLE_MAPS_API_KEY } from \"../helpers/constants\";\n\nexport const useMap = (mapRef) => {\n\n    const libraries = [\"places\"];\n  const {isLoaded, loadError} = useLoadScript({\n    googleMapsApiKey:process.env.REACT_APP_GOOGLE_MAP_API_KEY,\n    libraries,\n  });\n\n  const onMapLoad = useCallback(map => {\n    mapRef.current = map;\n  },[mapRef]);\n\n\n\n    return [onMapLoad,isLoaded, loadError];\n}\n","import React from \"react\";\nimport \"./styles.css\";\nimport { Provider } from \"react-redux\";\nimport {store} from './store/store';\n\nimport { Map } from \"./components/Map\";\n\nexport const App = () => {\n  return (\n    <Provider store={store}>\n      <Map />;\n    </Provider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\n\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);"],"sourceRoot":""}